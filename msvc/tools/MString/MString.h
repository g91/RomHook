#ifndef M_STRING_H_
#define M_STRING_H_

// ------------------------------------------------------------------------
// 比對單一字元函式指標
typedef int (*pFCompareChar) (char ch);

//-----------------------------------------------------------------------------
// Name: CharAlphabetA()
// Desc: 取得歐美單字長度
// Arg : const char* inString 來源字串
//		 int iLength 來源字串長度
// return : 回傳字串長度
//-----------------------------------------------------------------------------
int SeparateStringA(const unsigned char* inString, int iLength);

//-----------------------------------------------------------------------------
// Name: IntToStr()
// Desc: 數值轉換成字串並會考慮字串所要產生位置
// Arg : char *pDest 儲存轉換後字串資料
//		 int iValue 欲轉換的數值
//		 int iPosi 類似 printf("%2d")中2d的效果,設定此參數會在轉換後比對字串長
//		 度是否小於iPosi設定值,若小於則補上空格
// return : 回傳經轉換後目的字串新的指標位置
//-----------------------------------------------------------------------------
char* IntToStrA( char *pDest ,int iValue, int iPosi=0 );

//-----------------------------------------------------------------------------
// Name: CommandAnalytic()
// Desc: 檢查字串是否為轉換控制碼
// Arg : const char* string 來源字串
//		 int* piLen 字串前進距離,控制碼所佔字元個數
// return : 回傳控制碼類型
//-----------------------------------------------------------------------------
int CommandAnalyticA( const char* string, int* piLen );

//-----------------------------------------------------------------------------
// Name: ChangeString()
// Desc: 轉換字串中的特殊控制碼字元
// Arg : char* dest 目的字串
//		 const char* format_string 來源字串
//		 ... 不定參數個數
// return : 0
//-----------------------------------------------------------------------------
void SwapStringA( char* dest, const char* format_string, ... );
void SwapStringExA( char* dest, const char* format_string, va_list argp );

//-----------------------------------------------------------------------------
// Name: CharDouble()
// Desc: 判斷是否為雙字元組
// Arg : const char* dest 判斷字元
// return : 0否 1是
//-----------------------------------------------------------------------------
int CharDouble(const char* dest);

//-----------------------------------------------------------------------------
// Name: _m_show_char()
// Desc: 是否為可見字元(32 ~ 127)
// Arg : unsigned char ch 判斷字元
// return : 0否 1是
//-----------------------------------------------------------------------------
int _m_show_char(char ch);

//-----------------------------------------------------------------------------
// Name: CopyString()
// Desc: 複製指定長度字串到目的字串內,並可指定是否忽略計算某些字元
// Arg : char* des 目的字串指標
//		 const char* src 來源字串
//		 iLimit 限制複製字元數(BYTE)
//		 pfChar 字元比對函式,若傳回false則該字元會加入目的字串內,但不計算該字元
//				長度,主要用以將一些控制碼複製到目的字串內,但只計算可顯示的字元
//				長度
// return : 0否 1是
//-----------------------------------------------------------------------------
int CopyString(char* des, const char* src, int iLimit, pFCompareChar pfChar);

//-----------------------------------------------------------------------------
// Name: _m_strncpy()
// Desc: 複製指定長度字串到目的字串內,並可指定是否忽略計算某些字元
// Arg : char* des 目的字串指標
//		 const char* src 來源字串
//		 iLimit 限制複製字元數(BYTE)
//		 pfChar 字元比對函式,若傳回false則該字元會加入目的字串內,但不計算該字元
//				長度,主要用以將一些控制碼複製到目的字串內,但只計算可顯示的字元
//				長度
// return : 0否 1是
//-----------------------------------------------------------------------------
int _m_strncpy(char* des, const char* src, int iLimit, pFCompareChar pfChar);


// ----------------------------------------------------------------------------
// 將字串依指定大小(Byte),中間加入指定符號
int SizeAddChar(char* des, char* src, int iLimit, char ch, pFCompareChar pChar);

// ----------------------------------------------------------------------------
// 裁切顯示字串為指定大小
int ClipText(char* des, char* src, int iLimit);

// ----------------------------------------------------------------------------
// 傳回可顯示的最大字串長度,若不能顯示字元不算在內,當有換行字元時,重新計算
int _m_show_strlen(char* src);

// ----------------------------------------------------------------------------
// 傳回可顯示的最大字串長度,若不能顯示字元不算在內,當有換行字元時,重新計算
int ShowTextWidth(char* src);

// ----------------------------------------------------------------------------
// 計算字串顯示時寬高大小
void _m_Show_Text_Dimension(char* pSrc, int* piWidth, int* piHeight);

// ----------------------------------------------------------------------------
// 取代字串中指定字元為另一字元
void _m_Replace_Text_Char(char* pText, char cDes, char cSrc);

// ----------------------------------------------------------------------------
// 搜尋字元最後出現在字串的位置
int _m_Search_Last_Char(const char* pSrc, char ch);


#endif